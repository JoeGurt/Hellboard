
from machine import Pin, I2C, SPI
from ssd1306 import SSD1306_I2C
import keyboard
from helldiver import Hellboard, Hellbutton
from macro import Macros, Color
import framebuf
import time
from hellboard_cfg import *

DEBUG_PRINT = False

k = keyboard.Keyboard()
board = Hellboard(k)

helldiverImage = [
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xf0, 0x79, 0xff, 0xc7, 0x00, 0x70, 0x0f, 0xff, 0x0e, 0x78, 0x1e, 0xff, 0xe7, 0xff, 0x07, 0xf8, 
0xf0, 0x79, 0xff, 0xef, 0x80, 0xf0, 0x0f, 0xff, 0x9f, 0x78, 0x3e, 0xff, 0xf7, 0xff, 0x8f, 0xfc, 
0xf0, 0x79, 0xff, 0xef, 0x80, 0xf0, 0x0f, 0xff, 0xdf, 0x3c, 0x3c, 0xff, 0xf7, 0xff, 0xdf, 0xfe, 
0xf0, 0x79, 0xe0, 0x0f, 0x80, 0xf0, 0x0f, 0xff, 0xdf, 0x3c, 0x3c, 0xf0, 0x07, 0x83, 0xde, 0x00, 
0xff, 0xf9, 0xff, 0xcf, 0x80, 0xf0, 0x0f, 0x03, 0xdf, 0x3e, 0x78, 0xff, 0xe7, 0x83, 0xdf, 0xfc, 
0xff, 0xf9, 0xff, 0xcf, 0x80, 0xf0, 0x0f, 0x03, 0xdf, 0x1e, 0x78, 0xff, 0xe7, 0xc7, 0xcf, 0xfe, 
0xff, 0xf9, 0xff, 0xcf, 0x80, 0xf0, 0x0f, 0x03, 0xdf, 0x1e, 0x70, 0xff, 0xe7, 0xff, 0x8f, 0xff, 
0xff, 0xf9, 0xf0, 0x0f, 0x80, 0xf0, 0x0f, 0x03, 0xdf, 0x0f, 0xf0, 0xf0, 0x07, 0xff, 0x80, 0x0f, 
0xf0, 0x79, 0xff, 0xcf, 0xfc, 0xff, 0xcf, 0xff, 0xdf, 0x0f, 0xf0, 0xff, 0xe7, 0xc7, 0xcf, 0xff, 
0xf0, 0x79, 0xff, 0xef, 0xfe, 0xff, 0xef, 0xff, 0xdf, 0x07, 0xe0, 0xff, 0xf7, 0x83, 0xdf, 0xff, 
0xf0, 0x79, 0xff, 0xef, 0xfe, 0xff, 0xef, 0xff, 0x9f, 0x07, 0xe0, 0xff, 0xf7, 0x83, 0xcf, 0xfe, 
0xf0, 0x79, 0xff, 0xc7, 0xfe, 0xff, 0xef, 0xff, 0x0f, 0x03, 0xc0, 0xff, 0xe7, 0x83, 0xc7, 0xfc, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 
0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 
0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xb3, 0xcd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x33, 0xcc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0xff, 0xff, 0x3f, 0xff, 0x9e, 0x79, 0xff, 0xfc, 0xff, 0xff, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf0, 0x0f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x0f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]

ShowLogoCnt = 0
ScreenSaverCnt = 0
ScreenSaverActive = False
PressedBtnIndex = -1

colors = {}

time.sleep_ms(100)
displayReady = False
try:
    i2c = I2C(1, sda=Pin(14), scl=Pin(15))  # Init I2C using I2C0 defaults, SCL=Pin(GP9), SDA=Pin(GP8), freq=400000
    oled = SSD1306_I2C(WIDTH, HEIGHT, i2c, addr=0x3C) # Init oled display
    time.sleep_ms(100)
    oled.rotate(1)
    print("Display initialized")
    displayReady = True
except Exception:
    print("Display error " + str(Exception))

# Initialize SPI
spiLed = SPI(1,
            baudrate=2500000,
            polarity=1,
            phase=1,
            bits=8,
            firstbit=SPI.MSB,
            sck=Pin(10),
            mosi=Pin(11),
            miso=Pin(12))

# 1/2 mix
def byteToData(byte):
    # Initialize all `0`
    data = bytearray(b'\x92\x49\x24')
    data[0] |= 0x01 if (byte & 0x20) else 0
    data[0] |= 0x08 if (byte & 0x40) else 0
    data[0] |= 0x40 if (byte & 0x80) else 0
    data[1] |= 0x04 if (byte & 0x08) else 0
    data[1] |= 0x20 if (byte & 0x10) else 0
    data[2] |= 0x02 if (byte & 0x01) else 0
    data[2] |= 0x10 if (byte & 0x02) else 0
    data[2] |= 0x80 if (byte & 0x04) else 0
    return data

def rbgToData(r, g, b):
    data = bytearray()
    if(DEBUG_PRINT == True):
        print ("Adding R:" + str(r) + ", G:" + str(g) + ", B:" + str(b))
    data.extend(byteToData(g))
    data.extend(byteToData(r))
    data.extend(byteToData(b))
    return data

def intToData(color):
    if(DEBUG_PRINT == True):
        print ("Adding color: 0x{0:02x}".format(color))
    return rbgToData(((color>>16)&0xFF),
                     ((color>>8)&0xFF),
                     ((color)&0xFF))

index = 0
lastTime = time.ticks_ms()
switchTimeout = 300
btnHoldTime   = 300
brightnessConfirm = (BRIGHTNESS_CONFIRM<<16) + (BRIGHTNESS_CONFIRM<<8) + (BRIGHTNESS_CONFIRM)

btn_text_len = 0
btn_text_index = 0
updateCtr = 0
lastUpdateCtr = 0
button_1_3_txt = ''
button_txt_list = []

def doButtons():
    global ScreenSaverCnt
    global ScreenSaverActive
    global index
    global PressedBtnIndex
    global lastTime
    onBtnRelease = True
    pressed = False

 
    if(PressedBtnIndex == -1):
        btnIndex = 0
        for button in buttons:
            buttonState = button.isPressed(onBtnRelease, btnHoldTime)
            
            if buttonState == 2:
                if button.getMacro() == Macros.CYCLE:
                    print("buttonState: " + str(buttonState))
                    index = index - 1
                    if index < 0:
                        index = len(row1List) - 1
                    pressed = True
                    button_1_3.setMacro(row1List[index])

                    if(DEBUG_PRINT == True):
                        print("Button 1-3 set to: \"" + button_1_3.getMacro().getName() + "\"")
            elif buttonState == 1:
                if button.getMacro() == Macros.CYCLE:
                    print("buttonState: " + str(buttonState))
                    if(ScreenSaverActive == True):
                        ScreenSaverCnt = 0
                    else:
                        if (lastTime + switchTimeout) < time.ticks_ms():
                            lastTime = time.ticks_ms()
                            index = index + 1
                            if index >= len(row1List):
                                index = 0
                            pressed = True
                            button_1_3.setMacro(row1List[index])
                            
                            if(DEBUG_PRINT == True):
                                print("Button 1-3 set to: \"" + button_1_3.getMacro().getName() + "\"")
                else:
                    if(DEBUG_PRINT == True):
                        print(button.getMacro())
                    board.sendMacro(button.getMacro())
                    PressedBtnIndex = btnIndex
                    
            
                ScreenSaverCnt = 0
            btnIndex = btnIndex +1
    else:
        if PressedBtnIndex >= 0 and PressedBtnIndex < len(buttons):
            pressed = board.sendMacro(buttons[PressedBtnIndex].getMacro())
        
        if(pressed == True):
            PressedBtnIndex = -1

    return pressed

def doDisplay():
    global ScreenSaverActive
    global displayReady
    global updateCtr
    global lastUpdateCtr
    global btn_text_len
    global button_1_3_txt
    global button_txt_list
    global btn_text_index

    
    if button_1_3_txt != button_1_3.getName():
        button_1_3_txt = button_1_3.getName()
        button_txt_list.clear()
        button_txt_list.append(button_1_3.getName())
        button_txt_list.append(button_2_1.getName())
        button_txt_list.append(button_2_2.getName())
        button_txt_list.append(button_2_3.getName())
        button_txt_list.append(button_2_4.getName())
        btn_text_len = len(max(button_txt_list, key = len))
        btn_text_index = 0
        updateCtr = 0

    
    if displayReady:
        if (ScreenSaverActive == False):
            oled.fill(0)
            oled.text(button_1_3.getName()[btn_text_index::1],0,4)
            #oled.text("----------------",0,18)
            oled.text(button_2_1.getName()[btn_text_index::1],0,20)
            oled.text(button_2_2.getName()[btn_text_index::1],0,32)
            oled.text(button_2_3.getName()[btn_text_index::1],0,44)
            oled.text(button_2_4.getName()[btn_text_index::1],0,56)
            oled.show()
        else:
            oled.fill(0)
            oled.show()
    
    if SCROLLING_TEXT == True:
        updateCtr = updateCtr + 1
        
        if (updateCtr > 10 and updateCtr % 5 == 0):
            if btn_text_index + 16 < btn_text_len:
                btn_text_index = btn_text_index + 1
                lastUpdateCtr = updateCtr
        if btn_text_index + 16 >= btn_text_len and updateCtr - lastUpdateCtr > 10:
            btn_text_index = 0
            updateCtr = 0

def drawLogo():
    global helldiverImage
    pxlWidth = 0
    pxlHight = 0
    pxlColor = 0
    if displayReady:
        oled.fill(0)
        oled.show()
        for pxlByte in helldiverImage:
            for i in range(0, 8):
                if(((pxlByte >> (7-i)) & 0x1) > 0):
                    pxlColor = 1
                else:
                    pxlColor = 0
                oled.pixel(pxlWidth, pxlHight, pxlColor)
                pxlWidth = pxlWidth + 1
                if(pxlWidth >= WIDTH):
                    pxlWidth = 0
                    pxlHight = pxlHight + 1
        oled.show()

def doScreenSaver():
    global ScreenSaverCnt
    global ScreenSaverActive

    if(ScreenSaverCnt < ACTIVATE_SCREENSAVER_MSEC):
        ScreenSaverCnt = ScreenSaverCnt + 100
        ScreenSaverActive = False
    else:
        ScreenSaverActive = True


def doLed(buttonPressed):
    global brightnessConfirm
    
    data = bytearray()
    if buttonPressed:
        for x in range(8):
            data.extend(intToData(brightnessConfirm))
    else:
        for button in buttons:
            data.extend(intToData(colors[button.getMacro().getColor()]))
    spiLed.write(data)


# MAIN 


print (spiLed)
print ("Brightness set to " + str((BRIGHTNESS * 100) / 255) + "%")
button_1_3.setMacro(row1List[index])

colors[Color.YELLOW] = (BRIGHTNESS<<16) + (BRIGHTNESS<<8)
colors[Color.RED] = (BRIGHTNESS<<16)
colors[Color.GREEN] = (BRIGHTNESS<<8)
colors[Color.BLUE] = (BRIGHTNESS)
colors[Color.WHITE] = (BRIGHTNESS<<16) + (BRIGHTNESS<<8) + (BRIGHTNESS)

drawLogo()

TASK_TIME_MS = 1
taskTimer = 0
ShowLogoCnt = time.ticks_ms()

debugTaskTiming = 0

avgTaskTime_5ms = -1
avgTaskTime_10ms = -1
avgTaskTime_20ms = -1
avgTaskTime_50ms = -1
avgTaskTime_100ms = -1

lastTaskTime_5ms = -1
lastTaskTime_10ms = -1
lastTaskTime_20ms = -1
lastTaskTime_50ms = -1
lastTaskTime_100ms = -1

taskTimer_5ms = 5
taskTimer_10ms = 10
taskTimer_20ms = 20
taskTimer_50ms = 50
taskTimer_100ms = 100

pressed = False

while True:
    taskTimer = time.ticks_ms()

    if ((ShowLogoCnt + SHOWLOGO_MSEC) < taskTimer):    

        if doButtons() == True:
            pressed = True
        # if((lastTaskTime_5ms + taskTimer_5ms) < taskTimer):

        #     avgTaskTime_5ms = (avgTaskTime_5ms + (taskTimer - lastTaskTime_5ms))/2
        #     lastTaskTime_5ms = taskTimer

        # if((lastTaskTime_10ms + taskTimer_10ms) < taskTimer):

        #     avgTaskTime_10ms = (avgTaskTime_10ms + (taskTimer - lastTaskTime_10ms))/2
        #     lastTaskTime_10ms = taskTimer

        # if((lastTaskTime_20ms + taskTimer_20ms) < taskTimer):

        #     avgTaskTime_20ms = (avgTaskTime_20ms + (taskTimer - lastTaskTime_20ms))/2
        #     lastTaskTime_20ms = taskTimer

        if((lastTaskTime_50ms + taskTimer_50ms) < taskTimer):
            doDisplay()

            avgTaskTime_50ms = (avgTaskTime_50ms + (taskTimer - lastTaskTime_50ms))/2
            lastTaskTime_50ms = taskTimer

        if((lastTaskTime_100ms + taskTimer_100ms) < taskTimer):
            doScreenSaver()
            doLed(pressed)
            pressed = False

            avgTaskTime_100ms = (avgTaskTime_100ms + (taskTimer - lastTaskTime_100ms))/2
            lastTaskTime_100ms = taskTimer

    # if ((debugTaskTiming + 10000) < time.ticks_ms()):
    #     print ("Average Task Timings [5ms; 10ms; 20ms; 50ms; 100ms]:  [" + str(avgTaskTime_5ms) + "; " + str(avgTaskTime_10ms) + "; " + str(avgTaskTime_20ms) + "; " + str(avgTaskTime_50ms) + "; " + str(avgTaskTime_100ms) + "]")
    #     debugTaskTiming = time.ticks_ms()
    #time.sleep_ms(TASK_TIME_MS)
    #taskTimer = taskTimer + TASK_TIME_MS
